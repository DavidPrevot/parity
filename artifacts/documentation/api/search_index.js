var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\parity","icecave\\parity\\comparator","icecave\\parity\\exception","icecave\\parity\\abstractextendedcomparable","icecave\\parity\\anycomparableinterface","icecave\\parity\\comparator\\comparatorinterface","icecave\\parity\\comparator\\deepcomparator","icecave\\parity\\comparator\\objectidentitycomparator","icecave\\parity\\comparator\\paritycomparator","icecave\\parity\\comparator\\phpcomparator","icecave\\parity\\comparator\\strictphpcomparator","icecave\\parity\\exception\\notcomparableexception","icecave\\parity\\extendedcomparableinterface","icecave\\parity\\packageinfo","icecave\\parity\\parity","icecave\\parity\\restrictedcomparableinterface","icecave\\parity\\selfcomparableinterface","icecave\\parity\\subclasscomparableinterface","icecave\\parity\\abstractextendedcomparable::__construct","icecave\\parity\\abstractextendedcomparable::isequalto","icecave\\parity\\abstractextendedcomparable::isnotequalto","icecave\\parity\\abstractextendedcomparable::islessthan","icecave\\parity\\abstractextendedcomparable::isgreaterthan","icecave\\parity\\abstractextendedcomparable::islessthanorequalto","icecave\\parity\\abstractextendedcomparable::isgreaterthanorequalto","icecave\\parity\\anycomparableinterface::compare","icecave\\parity\\comparator\\comparatorinterface::compare","icecave\\parity\\comparator\\comparatorinterface::__invoke","icecave\\parity\\comparator\\deepcomparator::__construct","icecave\\parity\\comparator\\deepcomparator::fallbackcomparator","icecave\\parity\\comparator\\deepcomparator::compare","icecave\\parity\\comparator\\deepcomparator::__invoke","icecave\\parity\\comparator\\objectidentitycomparator::__construct","icecave\\parity\\comparator\\objectidentitycomparator::fallbackcomparator","icecave\\parity\\comparator\\objectidentitycomparator::compare","icecave\\parity\\comparator\\objectidentitycomparator::__invoke","icecave\\parity\\comparator\\paritycomparator::__construct","icecave\\parity\\comparator\\paritycomparator::fallbackcomparator","icecave\\parity\\comparator\\paritycomparator::compare","icecave\\parity\\comparator\\paritycomparator::__invoke","icecave\\parity\\comparator\\phpcomparator::__construct","icecave\\parity\\comparator\\phpcomparator::compare","icecave\\parity\\comparator\\phpcomparator::__invoke","icecave\\parity\\comparator\\strictphpcomparator::__construct","icecave\\parity\\comparator\\strictphpcomparator::compare","icecave\\parity\\comparator\\strictphpcomparator::__invoke","icecave\\parity\\exception\\notcomparableexception::__construct","icecave\\parity\\extendedcomparableinterface::isequalto","icecave\\parity\\extendedcomparableinterface::isnotequalto","icecave\\parity\\extendedcomparableinterface::islessthan","icecave\\parity\\extendedcomparableinterface::isgreaterthan","icecave\\parity\\extendedcomparableinterface::islessthanorequalto","icecave\\parity\\extendedcomparableinterface::isgreaterthanorequalto","icecave\\parity\\parity::compare","icecave\\parity\\parity::isequalto","icecave\\parity\\parity::isnotequalto","icecave\\parity\\parity::islessthan","icecave\\parity\\parity::isgreaterthan","icecave\\parity\\parity::islessthanorequalto","icecave\\parity\\parity::isgreaterthanorequalto","icecave\\parity\\parity::comparator","icecave\\parity\\restrictedcomparableinterface::compare","icecave\\parity\\restrictedcomparableinterface::cancompare","icecave\\parity\\selfcomparableinterface::compare","icecave\\parity\\subclasscomparableinterface::compare"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Parity","","Icecave\/Parity.html","","",3],["Icecave\\Parity\\Comparator","","Icecave\/Parity\/Comparator.html","","",3],["Icecave\\Parity\\Exception","","Icecave\/Parity\/Exception.html","","",3],["AbstractExtendedComparable","Icecave\\Parity","Icecave\/Parity\/AbstractExtendedComparable.html","","Convenience base class that implements ExtendedComparableInterface.",1],["AnyComparableInterface","Icecave\\Parity","Icecave\/Parity\/AnyComparableInterface.html","","An object that can be compared to any other value.",1],["ComparatorInterface","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/ComparatorInterface.html","","An object that can compare two values.",1],["DeepComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/DeepComparator.html","","A comparator that performs deep comparison of PHP arrays",1],["ObjectIdentityComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/ObjectIdentityComparator.html","","A comparator that compares objects by identity.",1],["ParityComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/ParityComparator.html","","A comparator that dispatches comparison operations",1],["PhpComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/PhpComparator.html","","A comparator that compares using the built-in PHP less",1],["StrictPhpComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/StrictPhpComparator.html","","A comparator that approximates a type-strict version",1],["NotComparableException","Icecave\\Parity\\Exception","Icecave\/Parity\/Exception\/NotComparableException.html"," < LogicException","",1],["ExtendedComparableInterface","Icecave\\Parity","Icecave\/Parity\/ExtendedComparableInterface.html","","Provides convenience methods for comparison operations.",1],["PackageInfo","Icecave\\Parity","Icecave\/Parity\/PackageInfo.html","","",1],["Parity","Icecave\\Parity","Icecave\/Parity\/Parity.html","","",1],["RestrictedComparableInterface","Icecave\\Parity","Icecave\/Parity\/RestrictedComparableInterface.html","","An object that can compare itself to a subset of other",1],["SelfComparableInterface","Icecave\\Parity","Icecave\/Parity\/SelfComparableInterface.html","","An object that can compare itself to other objects",1],["SubClassComparableInterface","Icecave\\Parity","Icecave\/Parity\/SubClassComparableInterface.html","","An object that can compare itself to other objects",1],["AbstractExtendedComparable::__construct","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method___construct","()","",2],["AbstractExtendedComparable::isEqualTo","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method_isEqualTo","(mixed $value)","",2],["AbstractExtendedComparable::isNotEqualTo","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method_isNotEqualTo","(mixed $value)","",2],["AbstractExtendedComparable::isLessThan","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method_isLessThan","(mixed $value)","",2],["AbstractExtendedComparable::isGreaterThan","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method_isGreaterThan","(mixed $value)","",2],["AbstractExtendedComparable::isLessThanOrEqualTo","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["AbstractExtendedComparable::isGreaterThanOrEqualTo","Icecave\\Parity\\AbstractExtendedComparable","Icecave\/Parity\/AbstractExtendedComparable.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["AnyComparableInterface::compare","Icecave\\Parity\\AnyComparableInterface","Icecave\/Parity\/AnyComparableInterface.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["ComparatorInterface::compare","Icecave\\Parity\\Comparator\\ComparatorInterface","Icecave\/Parity\/Comparator\/ComparatorInterface.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["ComparatorInterface::__invoke","Icecave\\Parity\\Comparator\\ComparatorInterface","Icecave\/Parity\/Comparator\/ComparatorInterface.html#method___invoke","(mixed $lhs, mixed $rhs)","An alias for compare().",2],["DeepComparator::__construct","Icecave\\Parity\\Comparator\\DeepComparator","Icecave\/Parity\/Comparator\/DeepComparator.html#method___construct","(<a href=\"Icecave\/Parity\/Comparator\/ComparatorInterface.html\"><abbr title=\"Icecave\\Parity\\Comparator\\ComparatorInterface\">ComparatorInterface<\/abbr><\/a> $fallbackComparator, boolean $relaxClassComparisons = false)","If $relaxClassComparisons is true, class names are",2],["DeepComparator::fallbackComparator","Icecave\\Parity\\Comparator\\DeepComparator","Icecave\/Parity\/Comparator\/DeepComparator.html#method_fallbackComparator","()","Fetch the fallback comparator.",2],["DeepComparator::compare","Icecave\\Parity\\Comparator\\DeepComparator","Icecave\/Parity\/Comparator\/DeepComparator.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["DeepComparator::__invoke","Icecave\\Parity\\Comparator\\DeepComparator","Icecave\/Parity\/Comparator\/DeepComparator.html#method___invoke","(mixed $lhs, mixed $rhs)","An alias for compare().",2],["ObjectIdentityComparator::__construct","Icecave\\Parity\\Comparator\\ObjectIdentityComparator","Icecave\/Parity\/Comparator\/ObjectIdentityComparator.html#method___construct","(<a href=\"Icecave\/Parity\/Comparator\/ComparatorInterface.html\"><abbr title=\"Icecave\\Parity\\Comparator\\ComparatorInterface\">ComparatorInterface<\/abbr><\/a> $fallbackComparator)","",2],["ObjectIdentityComparator::fallbackComparator","Icecave\\Parity\\Comparator\\ObjectIdentityComparator","Icecave\/Parity\/Comparator\/ObjectIdentityComparator.html#method_fallbackComparator","()","Fetch the fallback comparator.",2],["ObjectIdentityComparator::compare","Icecave\\Parity\\Comparator\\ObjectIdentityComparator","Icecave\/Parity\/Comparator\/ObjectIdentityComparator.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["ObjectIdentityComparator::__invoke","Icecave\\Parity\\Comparator\\ObjectIdentityComparator","Icecave\/Parity\/Comparator\/ObjectIdentityComparator.html#method___invoke","(mixed $lhs, mixed $rhs)","An alias for compare().",2],["ParityComparator::__construct","Icecave\\Parity\\Comparator\\ParityComparator","Icecave\/Parity\/Comparator\/ParityComparator.html#method___construct","(<a href=\"Icecave\/Parity\/Comparator\/ComparatorInterface.html\"><abbr title=\"Icecave\\Parity\\Comparator\\ComparatorInterface\">ComparatorInterface<\/abbr><\/a> $fallbackComparator)","",2],["ParityComparator::fallbackComparator","Icecave\\Parity\\Comparator\\ParityComparator","Icecave\/Parity\/Comparator\/ParityComparator.html#method_fallbackComparator","()","Fetch the fallback comparator.",2],["ParityComparator::compare","Icecave\\Parity\\Comparator\\ParityComparator","Icecave\/Parity\/Comparator\/ParityComparator.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["ParityComparator::__invoke","Icecave\\Parity\\Comparator\\ParityComparator","Icecave\/Parity\/Comparator\/ParityComparator.html#method___invoke","(mixed $lhs, mixed $rhs)","An alias for compare().",2],["PhpComparator::__construct","Icecave\\Parity\\Comparator\\PhpComparator","Icecave\/Parity\/Comparator\/PhpComparator.html#method___construct","()","",2],["PhpComparator::compare","Icecave\\Parity\\Comparator\\PhpComparator","Icecave\/Parity\/Comparator\/PhpComparator.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["PhpComparator::__invoke","Icecave\\Parity\\Comparator\\PhpComparator","Icecave\/Parity\/Comparator\/PhpComparator.html#method___invoke","(mixed $lhs, mixed $rhs)","An alias for compare().",2],["StrictPhpComparator::__construct","Icecave\\Parity\\Comparator\\StrictPhpComparator","Icecave\/Parity\/Comparator\/StrictPhpComparator.html#method___construct","(boolean $relaxNumericComparisons = true)","If $relaxNumericComparisons is true, integers and doubles",2],["StrictPhpComparator::compare","Icecave\\Parity\\Comparator\\StrictPhpComparator","Icecave\/Parity\/Comparator\/StrictPhpComparator.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["StrictPhpComparator::__invoke","Icecave\\Parity\\Comparator\\StrictPhpComparator","Icecave\/Parity\/Comparator\/StrictPhpComparator.html#method___invoke","(mixed $lhs, mixed $rhs)","An alias for compare().",2],["NotComparableException::__construct","Icecave\\Parity\\Exception\\NotComparableException","Icecave\/Parity\/Exception\/NotComparableException.html#method___construct","(mixed $lhs, mixed $rhs, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["ExtendedComparableInterface::isEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isEqualTo","(mixed $value)","",2],["ExtendedComparableInterface::isNotEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isNotEqualTo","(mixed $value)","",2],["ExtendedComparableInterface::isLessThan","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isLessThan","(mixed $value)","",2],["ExtendedComparableInterface::isGreaterThan","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isGreaterThan","(mixed $value)","",2],["ExtendedComparableInterface::isLessThanOrEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["ExtendedComparableInterface::isGreaterThanOrEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["Parity::compare","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yeilding a result according to",2],["Parity::isEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isEqualTo","(mixed $lhs, mixed $rhs)","",2],["Parity::isNotEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isNotEqualTo","(mixed $lhs, mixed $rhs)","",2],["Parity::isLessThan","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isLessThan","(mixed $lhs, mixed $rhs)","",2],["Parity::isGreaterThan","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isGreaterThan","(mixed $lhs, mixed $rhs)","",2],["Parity::isLessThanOrEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isLessThanOrEqualTo","(mixed $lhs, mixed $rhs)","",2],["Parity::isGreaterThanOrEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isGreaterThanOrEqualTo","(mixed $lhs, mixed $rhs)","",2],["Parity::comparator","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_comparator","()","Get the internal Parity comparator.",2],["RestrictedComparableInterface::compare","Icecave\\Parity\\RestrictedComparableInterface","Icecave\/Parity\/RestrictedComparableInterface.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["RestrictedComparableInterface::canCompare","Icecave\\Parity\\RestrictedComparableInterface","Icecave\/Parity\/RestrictedComparableInterface.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["SelfComparableInterface::compare","Icecave\\Parity\\SelfComparableInterface","Icecave\/Parity\/SelfComparableInterface.html#method_compare","(object $value)","Compare this object with another object of the same",2],["SubClassComparableInterface::compare","Icecave\\Parity\\SubClassComparableInterface","Icecave\/Parity\/SubClassComparableInterface.html#method_compare","(object $value)","Compare this object with another object of the same",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']