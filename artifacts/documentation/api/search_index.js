var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\parity","icecave\\parity\\comparator","icecave\\parity\\exception","icecave\\parity\\abstractcomparable","icecave\\parity\\comparableinterface","icecave\\parity\\comparator\\abstractcomparator","icecave\\parity\\comparator\\comparator","icecave\\parity\\comparator\\comparatorinterface","icecave\\parity\\comparator\\deepcomparator","icecave\\parity\\delegatingcomparableinterface","icecave\\parity\\exception\\notcomparableexception","icecave\\parity\\extendedcomparableinterface","icecave\\parity\\packageinfo","icecave\\parity\\parity","icecave\\parity\\restrictedcomparableinterface","icecave\\parity\\abstractcomparable::__construct","icecave\\parity\\abstractcomparable::isequalto","icecave\\parity\\abstractcomparable::isnotequalto","icecave\\parity\\abstractcomparable::islessthan","icecave\\parity\\abstractcomparable::isgreaterthan","icecave\\parity\\abstractcomparable::islessthanorequalto","icecave\\parity\\abstractcomparable::isgreaterthanorequalto","icecave\\parity\\comparableinterface::compare","icecave\\parity\\comparator\\abstractcomparator::__construct","icecave\\parity\\comparator\\abstractcomparator::compare","icecave\\parity\\comparator\\abstractcomparator::defaultcompare","icecave\\parity\\comparator\\comparator::__construct","icecave\\parity\\comparator\\comparator::defaultcompare","icecave\\parity\\comparator\\comparatorinterface::compare","icecave\\parity\\comparator\\deepcomparator::__construct","icecave\\parity\\comparator\\deepcomparator::defaultcompare","icecave\\parity\\delegatingcomparableinterface::delegatingcompare","icecave\\parity\\exception\\notcomparableexception::__construct","icecave\\parity\\extendedcomparableinterface::isequalto","icecave\\parity\\extendedcomparableinterface::isnotequalto","icecave\\parity\\extendedcomparableinterface::islessthan","icecave\\parity\\extendedcomparableinterface::isgreaterthan","icecave\\parity\\extendedcomparableinterface::islessthanorequalto","icecave\\parity\\extendedcomparableinterface::isgreaterthanorequalto","icecave\\parity\\parity::compare","icecave\\parity\\parity::isequalto","icecave\\parity\\parity::isnotequalto","icecave\\parity\\parity::islessthan","icecave\\parity\\parity::isgreaterthan","icecave\\parity\\parity::islessthanorequalto","icecave\\parity\\parity::isgreaterthanorequalto","icecave\\parity\\restrictedcomparableinterface::cancompare"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Parity","","Icecave\/Parity.html","","",3],["Icecave\\Parity\\Comparator","","Icecave\/Parity\/Comparator.html","","",3],["Icecave\\Parity\\Exception","","Icecave\/Parity\/Exception.html","","",3],["AbstractComparable","Icecave\\Parity","Icecave\/Parity\/AbstractComparable.html","","",1],["ComparableInterface","Icecave\\Parity","Icecave\/Parity\/ComparableInterface.html","","",1],["AbstractComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/AbstractComparator.html","","",1],["Comparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/Comparator.html"," < AbstractComparator","",1],["ComparatorInterface","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/ComparatorInterface.html","","",1],["DeepComparator","Icecave\\Parity\\Comparator","Icecave\/Parity\/Comparator\/DeepComparator.html"," < AbstractComparator","",1],["DelegatingComparableInterface","Icecave\\Parity","Icecave\/Parity\/DelegatingComparableInterface.html","","",1],["NotComparableException","Icecave\\Parity\\Exception","Icecave\/Parity\/Exception\/NotComparableException.html"," < LogicException","",1],["ExtendedComparableInterface","Icecave\\Parity","Icecave\/Parity\/ExtendedComparableInterface.html","","",1],["PackageInfo","Icecave\\Parity","Icecave\/Parity\/PackageInfo.html","","",1],["Parity","Icecave\\Parity","Icecave\/Parity\/Parity.html","","",1],["RestrictedComparableInterface","Icecave\\Parity","Icecave\/Parity\/RestrictedComparableInterface.html","","",1],["AbstractComparable::__construct","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method___construct","()","",2],["AbstractComparable::isEqualTo","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method_isEqualTo","(mixed $value)","",2],["AbstractComparable::isNotEqualTo","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method_isNotEqualTo","(mixed $value)","",2],["AbstractComparable::isLessThan","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method_isLessThan","(mixed $value)","",2],["AbstractComparable::isGreaterThan","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method_isGreaterThan","(mixed $value)","",2],["AbstractComparable::isLessThanOrEqualTo","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["AbstractComparable::isGreaterThanOrEqualTo","Icecave\\Parity\\AbstractComparable","Icecave\/Parity\/AbstractComparable.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["ComparableInterface::compare","Icecave\\Parity\\ComparableInterface","Icecave\/Parity\/ComparableInterface.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["AbstractComparator::__construct","Icecave\\Parity\\Comparator\\AbstractComparator","Icecave\/Parity\/Comparator\/AbstractComparator.html#method___construct","()","",2],["AbstractComparator::compare","Icecave\\Parity\\Comparator\\AbstractComparator","Icecave\/Parity\/Comparator\/AbstractComparator.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["AbstractComparator::defaultCompare","Icecave\\Parity\\Comparator\\AbstractComparator","Icecave\/Parity\/Comparator\/AbstractComparator.html#method_defaultCompare","(mixed $lhs, mixed $rhs)","",2],["Comparator::__construct","Icecave\\Parity\\Comparator\\Comparator","Icecave\/Parity\/Comparator\/Comparator.html#method___construct","()","",2],["Comparator::defaultCompare","Icecave\\Parity\\Comparator\\Comparator","Icecave\/Parity\/Comparator\/Comparator.html#method_defaultCompare","(mixed $lhs, mixed $rhs)","",2],["ComparatorInterface::compare","Icecave\\Parity\\Comparator\\ComparatorInterface","Icecave\/Parity\/Comparator\/ComparatorInterface.html#method_compare","(mixed $lhs, mixed $rhs)","Compare two values, yielding a result according to",2],["DeepComparator::__construct","Icecave\\Parity\\Comparator\\DeepComparator","Icecave\/Parity\/Comparator\/DeepComparator.html#method___construct","()","",2],["DeepComparator::defaultCompare","Icecave\\Parity\\Comparator\\DeepComparator","Icecave\/Parity\/Comparator\/DeepComparator.html#method_defaultCompare","(mixed $lhs, mixed $rhs)","",2],["DelegatingComparableInterface::delegatingCompare","Icecave\\Parity\\DelegatingComparableInterface","Icecave\/Parity\/DelegatingComparableInterface.html#method_delegatingCompare","(mixed $value, <a href=\"Icecave\/Parity\/Comparator\/ComparatorInterface.html\"><abbr title=\"Icecave\\Parity\\Comparator\\ComparatorInterface\">ComparatorInterface<\/abbr><\/a> $comparator)","Compare this object with another value, yielding a",2],["NotComparableException::__construct","Icecave\\Parity\\Exception\\NotComparableException","Icecave\/Parity\/Exception\/NotComparableException.html#method___construct","(mixed $lhs, mixed $rhs, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["ExtendedComparableInterface::isEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isEqualTo","(mixed $value)","",2],["ExtendedComparableInterface::isNotEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isNotEqualTo","(mixed $value)","",2],["ExtendedComparableInterface::isLessThan","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isLessThan","(mixed $value)","",2],["ExtendedComparableInterface::isGreaterThan","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isGreaterThan","(mixed $value)","",2],["ExtendedComparableInterface::isLessThanOrEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["ExtendedComparableInterface::isGreaterThanOrEqualTo","Icecave\\Parity\\ExtendedComparableInterface","Icecave\/Parity\/ExtendedComparableInterface.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["Parity::compare","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_compare","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["Parity::isEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isEqualTo","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["Parity::isNotEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isNotEqualTo","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["Parity::isLessThan","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isLessThan","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["Parity::isGreaterThan","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isGreaterThan","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["Parity::isLessThanOrEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isLessThanOrEqualTo","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["Parity::isGreaterThanOrEqualTo","Icecave\\Parity\\Parity","Icecave\/Parity\/Parity.html#method_isGreaterThanOrEqualTo","(mixed $lhs, mixed $rhs, boolean $deep = true)","",2],["RestrictedComparableInterface::canCompare","Icecave\\Parity\\RestrictedComparableInterface","Icecave\/Parity\/RestrictedComparableInterface.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']